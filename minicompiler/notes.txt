lexer.c
    Add relational operators to keyword symbol table. Create variable and
    function symbol table during lexical analysis. Inline the hash function
    in get_lexeme(), so the function only mallocates for new variables.
    Otherwise return a pointer to the value of the correct symbol table
    entry.

parser.c:
    Implement DAG creation by putting nodes in hash table. This should
    be quite simple for expressions since they are made of simple constructs
    with straightforward hash calculation, but harder for things such as
    statements since the hash calculation is more complicated. Doing this
    does, however, have many advantages in both in terms of performance
    (fewer mallocs) and optimization of intermediate representation with
    things such as pre-calculation of expressions and generating fewer
    assembly lines.

type checking:


IR generation:
    While the current IR generator writes pseudo-assembly to an output stream --
    I believe a more suitable approach would be to have it make an array or
    linked list of "instruction structs". With this approach, it would be easier
    to avoid duplication of labels -- since a label could be a pointer to
    an int value. And if it happens that to labels are emitted on the same
    instruction we could simply destroy the second label and let all gotos
    pointing to the second, now destroyed, label point to the first.

    Revisit (later) how the operand type is carried through the analysis. The
    current solution is a hack (does not work for other constants than number),
    and needs a cleanup. For example, change op.addr to carry operand type.
