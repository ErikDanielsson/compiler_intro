lexer.c
    Add relational operators to keyword symbol table. Create variable and
    function symbol table during lexical analysis. Inline the hash function
    in get_lexeme(), so the function only mallocates for new variables.
    Otherwise return a pointer to the value of the correct symbol table
    entry.

parser.c:
    Implement DAG creation by putting nodes in hash table. This should
    be quite simple for expressions since they are made of simple constructs
    with straightforward hash calculation, but harder for things such as
    statements since the hash calculation is more complicated. Doing this
    does, however, have many advantages in both in terms of performance
    (fewer mallocs) and optimization of intermediate representation with
    things such as pre-calculation of expressions and generating fewer
    assembly lines.

type checking:
    By careful analysis of the stack states we should be able to determine
    whether we've entered or left a new scope, since the language denotes all
    scopes with '{' '}'. Hence symbol table creation, and therefore typechecking
    should be possible to do parsing. This is because no inherited attributes
    are used for simple type checking.

IR generation:
    Inherited attributes: While this is not natural for an LR parser, together
    with either a dictionary or a stack, I believe it could be done.
