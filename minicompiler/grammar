start -> S

S -> program

program -> 'PROGRAM' 'ID' '{' compound_statement '}'

compound_statement -> compound_statement statement | statement

statement -> variable_declaration ';'
statement -> function_declaration
statement -> assignment_statement ';'
statement -> function_call ';'
statement -> if_elif_else_statement
statement -> while_loop


variable_declaration -> type 'ID' | type 'ID' 'ASSIGN' expr


function_declaration -> 'DEFINE' 'ID' '(' params ')' '{' compound_statement '}'
function_declaration -> 'DEFINE' 'ID' '(' ')' '{' compound_statement '}'


params -> param_decl param_list | param_decl

param_list -> ',' param_list | param_decl

param_decl -> type 'ID'

type -> 'STYPE' | 'ITYPE' | 'FTYPE'

expr -> expr '-' expr
expr -> expr '+' expr
expr -> expr '/' expr
expr -> expr '%' expr
expr -> expr '*' expr
expr -> expr '^' expr
expr -> '(' expr ')'
expr -> 'ICONST'
expr -> 'FCONST'
expr -> 'ID'
expr -> function_call
expr -> '+' expr
expr -> '-' expr

precedence: '-' : 0, '+' : 0, '*' : 1, '/' : 1, '%' : 1, '^' : 2


assignment_statement -> 'ID' 'ASSIGN' expr | 'ID' 'SUFFIXOP'


function_call -> 'ID' '(' args ')' | 'ID' '(' ')'

args -> expr arg_list | expr
arg_list -> ',' arg_list | expr


if_elif_else_statement -> if_statement | if_statement elif_list

elif_list -> elif_statement elif_list | elif_statement | else_statement

if_statement -> 'IF' b_expr '{' compound_statement '}'

elif_statement -> 'ELIF' b_expr '{' compound_statement '}'

else_statement -> 'ELSE' '{' compound_statement '}'


while_loop -> 'WHILE' b_expr '{' compound_statement '}'

b_expr -> b_term 'NAND' b_expr | b_term
b_term -> '(' b_expr ')' | r_expr

r_expr -> expr 'RELOP' expr
