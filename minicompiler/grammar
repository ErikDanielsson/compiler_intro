start -> compound_statement

compound_statement -> compound_statement statement | statement

statement -> variable_declaration ';'
statement -> function_declaration
statement -> assignment_statement ';'
statement -> function_call ';'
statement -> if_elif_else_statement
statement -> while_loop
statement -> for_loop

variable_declaration -> type 'ID' | type 'ID' '=' expr

function_declaration -> 'DEFINE' type 'ID' '(' params ')' '{' compound_statement '}'
function_declaration -> 'DEFINE' type 'ID' '(' ')' '{' compound_statement '}'


params -> params ',' variable_declaration | variable_declaration

type -> 'STYPE' | 'ITYPE' | 'FTYPE'
type -> type '[' expr ']'
type -> type '[' ']'

index_acc -> index_acc '[' expr ']' | '[' expr ']'

variable_access -> 'ID' | 'ID' index_acc

expr -> expr '-' expr
expr -> expr '+' expr
expr -> expr '/' expr
expr -> expr '%' expr
expr -> expr '*' expr
expr -> expr '^' expr
expr -> '(' expr ')'
expr -> 'ICONST'
expr -> 'FCONST'
expr -> variable_access
expr -> function_call
expr -> '+' expr
expr -> '-' expr

precedence: '-' : 0, '+' : 0, '*' : 1, '/' : 1, '%' : 1, '^' : 2


assignment_statement -> variable_access 'ASSIGN' expr
assignment_statement -> variable_access '=' expr
assignment_statement -> variable_access 'SUFFIXOP'

function_call -> 'ID' '(' args ')' | 'ID' '(' ')'

args -> args ',' expr | expr


if_elif_else_statement -> if_statement | if_statement elif_list

elif_list -> elif_statement elif_list | elif_statement | else_statement

if_statement -> 'IF' b_expr '{' compound_statement '}'

elif_statement -> 'ELIF' b_expr '{' compound_statement '}'

else_statement -> 'ELSE' '{' compound_statement '}'


while_loop -> 'WHILE' b_expr '{' compound_statement '}'

for_loop -> 'FOR' variable_declaration ',' b_expr ',' assignment_statement '{' compound_statement '}'
for_loop -> 'FOR' assignment_statement ',' b_expr ',' assignment_statement '{' compound_statement '}'

b_expr -> b_expr 'NAND' b_expr | b_expr
b_expr -> '(' b_expr ')' | r_expr

r_expr -> expr 'RELOP' expr
