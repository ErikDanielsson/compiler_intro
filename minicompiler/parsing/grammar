start -> compound_statement

compound_statement -> compound_statement statement | statement

statement -> variable_declaration ';'
statement -> struct_declaration
statement -> function_declaration
statement -> assignment_statement ';'
statement -> function_call ';'
statement -> if_elif_else_statement
statement -> while_loop
statement -> for_loop
statement -> scope
statement -> return_statement ';'

variable_declaration -> 'ID' indices 'ID' | 'ID' indices 'ID' '=' expr
variable_declaration -> 'ID' 'ID' | 'ID' 'ID' '=' expr

struct_declaration -> 'STRUCT' 'ID' '{' declaration_list '}'

declaration_list -> declaration_list variable_declaration ';'
declaration_list -> variable_declaration ';'

function_declaration -> 'DEFINE' 'ID' empty_indices 'ID' '(' params ')' '{' compound_statement '}'
function_declaration -> 'DEFINE' 'ID' empty_indices 'ID' '(' ')' '{' compound_statement '}'
function_declaration -> 'DEFINE' 'ID' 'ID' '(' params ')' '{' compound_statement '}'
function_declaration -> 'DEFINE' 'ID' 'ID' '(' ')' '{' compound_statement '}'

empty_indices -> empty_indices '[' ']' | '[' ']'

params -> params ',' variable_declaration | variable_declaration

indices -> indices '[' expr ']' | '[' expr ']'
indices -> indices '[' ']' | '[' ']'

variable_access -> 'ID' | 'ID' indices
variable_access ->  variable_access '.' 'ID' | variable_access '.' 'ID' indices

expr -> expr '-' expr
expr -> expr '+' expr
expr -> expr '/' expr
expr -> expr '%' expr
expr -> expr '*' expr
expr -> expr '^' expr
expr -> expr '&' expr
expr -> expr '|' expr
expr -> expr 'SHL' expr
expr -> expr 'SHR' expr
expr -> expr 'RELOP' expr
expr -> expr 'AND' expr
expr -> expr 'OR' expr
expr -> '(' expr ')'
expr -> 'ICONST'
expr -> 'FCONST'
expr -> 'SCONST'
expr -> variable_access
expr -> function_call
expr -> '+' expr
expr -> '-' expr
expr -> '~' expr
expr -> '!' expr
expr -> '(' 'ID' ')' expr

precedence: 'OR' : 0, 'AND' : 1, 'RELOP' : 2
precedence: '|' : 3, '^' : 4, '&' : 5, 'SHL' : 6, 'SHR' : 6
precedence: '-' : 7, '+' : 7, '!' : 8, '*' : 9, '/' : 10, '%' : 10
precedence: '(' : 11

assignment_statement -> variable_access 'ASSIGN' expr
assignment_statement -> variable_access '=' expr
assignment_statement -> variable_access 'SUFFIXOP'

function_call -> 'ID' '(' args ')' | 'ID' '(' ')'

args -> args ',' expr | expr


if_elif_else_statement -> if_statement | if_statement elif_list

elif_list -> elif_statement elif_list | elif_statement | else_statement

if_statement -> 'IF' expr '{' compound_statement '}'

elif_statement -> 'ELIF' expr '{' compound_statement '}'

else_statement -> 'ELSE' '{' compound_statement '}'


while_loop -> 'WHILE' expr '{' compound_statement '}'

for_loop -> 'FOR' variable_declaration ',' expr ',' assignment_statement '{' compound_statement '}'
for_loop -> 'FOR' assignment_statement ',' expr ',' assignment_statement '{' compound_statement '}'

scope -> '{' compound_statement '}'

return_statement -> 'RETURN' expr
