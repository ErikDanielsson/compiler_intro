5.2.6 Exercises for Section 5.2
Exercise 5.2.1: What are all the topological sorts for the dependency graph
of Fig. 5.7?
a: 1 2 3 4 5 6 7 8 9
b: 1 3 2 4 5 6 7 8 9
c: 1 2 4 3 5 6 7 8 9
and so on...

Exercise 5.2.2: For the SDD of Fig. 5.8, give annotated parse trees for the
following expressions:
a) int a, b, c.
b) float w, x, y, z.


Exercise 5 .2.3 : Suppose that we have a production A -> BCD. Each of
the four nonterminals A, B, C, and D have two attributes: s is a synthesized
attribute, and i is an inherited attribute. For each of the sets of rules below,
tell whether (i) the rules are consistent with an S-attributed definition (ii) the
rules are consistent with an L-attributed definition, and (iii) whether the rules
are consistent with any evaluation order at all?
a ) A.s = B.i + C.s.
	i. No
	ii. Yes.
	iii. Yes.
b ) A.s = B.i + C.s and D .i = A.i + B.s.
	i. No.
	ii. Yes, since the definition of D.i only uses symbols on its left in
	the production
	iii.
c ) A.s = B.s + D.s.
	i. Yes, since only synthesized attributes are used
	ii. Yes.
	iii. Yes.
! d ) A.s = D.i, B.i = A.s + C.s, C.i = B.s, and D.i = B.i + C.i.
	i. No.
	ii. No, since the defintion of attribute B.i uses C which is on the
	right of B in the production.
	iii. No, since A.s depends on D.i which depends on B.i which in turn
	depends on A.s -- there is a loop which makes a topological sort
	impossible.

! Exercise 5.2.4 : This grammar generates binary numbers with a "decimal"
point:
S -> L.L | L
L -> L B | B
B -> 0 | 1
Design an L-attributed SDD to compute B.val , the decimal-number value of
an input string. For example, the translation of string 101.101 should be the
decimal number 5.625. Hint: use an inherited attribute L.side that tells which
side of the decimal point a bit is on.

S -> L1.L2	L1.side = i, L2.side = f, L2.n = 1
S -> L		L.side = i
L -> L1 B	if L.side == i:
			L.val = L1.val*2+B.val
		else:
			L.n = L1.n + 1
			L.val = L1.val+B.val*2^(-L1.n)
L -> B		if L.side == i:
			L.val = B.val
		else:
			L.val = B.val*2^(-1)
			L.n = 1
B -> 0		B.val = 0
B -> 1		B.val = 1

!! Exercise 5.2.5 : Design an S-attributed SDD for the grammar and translation
described in Exercise 5.2.4.

S -> L1.L2	S.val = L1.val + L2.val * 2^(-L2.n)
S -> L 		S.val = L.val
L -> L1 B	L.n = L1.n + 1
		L.val = B.val
L -> B		L.n = 1
		L.val = B.val
B -> 0		B.val = 0
B -> 1		B.val = 1

!! Exercise 5 .2.6 : Implement Algorithm 3.23, which converts a regular expresÂ­
sion into a nondeterministic finite automaton, by an L-attributed SDD on a
top-down parsable grammar. Assume that there is a token char representing
any character, and that char.lexval is the character it represents. You may also
assume the existence of a function new O that returns a new state, that is, a
state never before returned by this function. Use any convenient notation to
specify the transitions of the NFA
