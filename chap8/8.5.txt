Exercise 8.5.1: Construct the DAG for the basic block
    d = b * c
    e = a + b
    b = b * c
    a = e - d

    NULL

Exercise 8.5.2: Simplify the three-address code of Exercise 8.5.1, assuming
a) Only a is live on exit from the block.
    d = b * c
    e = a + b
    a = e - d
b) a, b, and c are live on exit from the block.
    d = b * c
    e = a + b
    b = d
    a = e - d
Exercise 8.5.3: Construct the basic block for the code in block B6 of Fig. 8.9.
Do not forget to include the comparison i S 10.
    Isn't it already a basic block??

Exercise 8.5.4: Construct the basic block for the code in block B3 of Fig. 8.9.
    Isn't it already a basic block??

Exercise 8.5.5: Extend Algorithm 8.7 to process three-statements of the form
a) a[i] = b
    "Link"
b) a = b [i]
c) a = *b
d) *a = b

Exercise 8.5.6: Construct the DAG for the basic block a [i] = b
*p = c
d = a [j ]
e = *p
*p = a [i]
on the assumption that
a ) p can point anywhere.
b ) p can point only to b or d.
! Exercise 8.5.7: If a pointer or array expression, such as a [i] or *p is assigned
and then used, without the possibility of being changed in the interim, we can
take advantage of the situation to simplify the DAG. For example, in the
code of Exercise 8.5.6, since p is not assigned between the second and fourth
statements, the statement e = *p can be replaced by e = c, regardless of what
p points to. Revise the DAG-construction algorithm to take advantage of such
situations, and apply your algorithm to the code of Example 8.5.6.
Exercise 8.5.8: Suppose a basic block is formed from the C assignment stateÂ­
ments
x = a + b + C + d + e + f;
a + c + e;
Y
a ) Give the three-address statements ( only one addition per statement ) for
this block.
b ) Use the associative and commutative laws to modify the block to use the
fewest possible number of instructions, assuming both x and y are live on
exit from the block.
